{"remainingRequest":"E:\\2020xian\\git-AntiFraud\\node_modules\\_vue-loader@15.9.6@vue-loader\\lib\\index.js??vue-loader-options!E:\\2020xian\\git-AntiFraud\\src\\views\\dashboard\\admin\\components\\mapChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\2020xian\\git-AntiFraud\\src\\views\\dashboard\\admin\\components\\mapChart.vue","mtime":1608618485419},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_babel-loader@8.2.2@babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_vue-loader@15.9.6@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KCmltcG9ydCBlY2hhcnRzIGZyb20gJ2VjaGFydHMnCnJlcXVpcmUoJ2VjaGFydHMvdGhlbWUvbWFjYXJvbnMnKSAvLyBlY2hhcnRzIHRoZW1lCnJlcXVpcmUoJ2VjaGFydHMvbWFwL2pzL3Byb3ZpbmNlL3NoYW54aTEnKQppbXBvcnQgcmVzaXplIGZyb20gJy4vbWl4aW5zL3Jlc2l6ZScKCmNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gNjAwMAoKZXhwb3J0IGRlZmF1bHQgewogIG1peGluczogW3Jlc2l6ZV0sCiAgcHJvcHM6IHsKICAgIGNsYXNzTmFtZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdjaGFydCcKICAgIH0sCiAgICB3aWR0aDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcxMDAlJwogICAgfSwKICAgIGhlaWdodDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICc1MDBweCcKICAgIH0KICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjaGFydDogbnVsbAogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgdGhpcy5pbml0Q2hhcnQoKQogICAgfSkKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAoIXRoaXMuY2hhcnQpIHsKICAgICAgcmV0dXJuCiAgICB9CiAgICB0aGlzLmNoYXJ0LmRpc3Bvc2UoKQogICAgdGhpcy5jaGFydCA9IG51bGwKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXRDaGFydCgpIHsKICAgICAgdGhpcy5jaGFydCA9IGVjaGFydHMuaW5pdCh0aGlzLiRlbCwgJ21hY2Fyb25zJykKCiAgICAgIHZhciBnZW9Db29yZE1hcCA9IHsKICAgICAgICAn6KW/5a6JJzogWzEwOC44NDgwLCAzNC4wNjMxXSwKICAgICAgICAn5a6d6bihJzogWzEwNy4xNDQ4LCAzNC4zNjkzXSwKICAgICAgICAn6ZOc5bedJzogWzEwOC45Nzk2LCAzNS4zMTY1XSwKICAgICAgICAn5ZK46ZizJzogWzEwOC4zMDUxLCAzNC44MzM0XSwKICAgICAgICAn5rit5Y2XJzogWzEwOS44MDI4LCAzNC41OTkzXSwKICAgICAgICAn5bu25a6JJzogWzEwOS40OTA4LCAzNi41OTY1XSwKICAgICAgICAn5rGJ5LitJzogWzEwNy4wMjg2LCAzMy4wNzc2XSwKICAgICAgICAn5qaG5p6XJzogWzEwOS43NDExLCAzOC4yOTAxXSwKICAgICAgICAn5a6J5bq3JzogWzEwOS4wMjkyLCAzMi42OTAzXSwKICAgICAgICAn5ZWG5rSbJzogWzEwOS45Mzk3LCAzMy42NjgzXQogICAgICB9OwogICAgICB2YXIgY29sb3JzID0gWwogICAgICAgIFsiIzFERTlCNiIsICIjRjQ2RTM2IiwgIiMwNEI5RkYiLCAiIzVEQkQzMiIsICIjRkZDODA5IiwgIiNGQjk1RDUiLCAiI0JEQTI5QSIsICIjNkU3MDc0IiwgIiM1NDY1NzAiLCAiI0M0Q0NEMyJdLAogICAgICAgIFsiIzM3QTJEQSIsICIjNjdFMEUzIiwgIiMzMkM1RTkiLCAiIzlGRTZCOCIsICIjRkZEQjVDIiwgIiNGRjlGN0YiLCAiI0ZCNzI5MyIsICIjRTA2MkFFIiwgIiNFNjkwRDEiLCAiI0U3QkNGMyIsICIjOUQ5NkY1IiwgIiM4Mzc4RUEiLCAiIzgzNzhFQSJdLAogICAgICAgIFsiI0RENkI2NiIsICIjNzU5QUEwIiwgIiNFNjlEODciLCAiIzhEQzFBOSIsICIjRUE3RTUzIiwgIiNFRURENzgiLCAiIzczQTM3MyIsICIjNzNCOUJDIiwgIiM3Mjg5QUIiLCAiIzkxQ0E4QyIsICIjRjQ5RjQyIl0sCiAgICAgIF07CiAgICAgIHZhciBjb2xvckluZGV4ID0gMDsKICAgICAgdmFyIHllYXIgPSBbICIyMDE2IiwgIjIwMTciLCAiMjAxOCIsICIyMDE5IiwgIjIwMjAiXTsKICAgICAgdmFyIG1hcERhdGEgPSBbCiAgICAgICAgW10sCiAgICAgICAgW10sCiAgICAgICAgW10sCiAgICAgICAgW10sCiAgICAgICAgW10sCiAgICAgICAgW10KICAgICAgXTsKCiAgICAgIC8q5p+x5a2QWeWQjeensCovCiAgICAgIHZhciBjYXRlZ29yeURhdGEgPSBbXTsKICAgICAgdmFyIGJhckRhdGEgPSBbXTsKICAgICAgZm9yICh2YXIga2V5IGluIGdlb0Nvb3JkTWFwKSB7CiAgICAgICAgY2F0ZWdvcnlEYXRhLnB1c2goa2V5KTsKICAgICAgICBtYXBEYXRhWzBdLnB1c2goewogICAgICAgICAgInllYXIiOiAnMjAxNicsCiAgICAgICAgICAibmFtZSI6IGtleSwKICAgICAgICAgICJ2YWx1ZSI6IHRoaXMucmFuZG9tTnVtKDEwMCwgMzAwKQogICAgICAgIH0pOwogICAgICAgIG1hcERhdGFbMV0ucHVzaCh7CiAgICAgICAgICAieWVhciI6ICcyMDE3JywKICAgICAgICAgICJuYW1lIjoga2V5LAogICAgICAgICAgInZhbHVlIjogdGhpcy5yYW5kb21OdW0oMTAwLCAzMDApCiAgICAgICAgfSk7CiAgICAgICAgbWFwRGF0YVsyXS5wdXNoKHsKICAgICAgICAgICJ5ZWFyIjogJzIwMTgnLAogICAgICAgICAgIm5hbWUiOiBrZXksCiAgICAgICAgICAidmFsdWUiOiB0aGlzLnJhbmRvbU51bSgxMDAsIDMwMCkKICAgICAgICB9KTsKICAgICAgICBtYXBEYXRhWzNdLnB1c2goewogICAgICAgICAgInllYXIiOiAnMjAxOScsCiAgICAgICAgICAibmFtZSI6IGtleSwKICAgICAgICAgICJ2YWx1ZSI6IHRoaXMucmFuZG9tTnVtKDEwMCwgMzAwKQogICAgICAgIH0pOwogICAgICAgIG1hcERhdGFbNF0ucHVzaCh7CiAgICAgICAgICAieWVhciI6ICcyMDIwJywKICAgICAgICAgICJuYW1lIjoga2V5LAogICAgICAgICAgInZhbHVlIjogdGhpcy5yYW5kb21OdW0oMTAwLCAzMDApCiAgICAgICAgfSk7CgogICAgICB9CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwRGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgIGJhckRhdGEucHVzaChbXSk7CiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXBEYXRhW2ldLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICBiYXJEYXRhW2ldLnB1c2gobWFwRGF0YVtpXVtqXS52YWx1ZSkKICAgICAgICB9CiAgICAgIH0KICAgICAgdmFyIGNvbnZlcnREYXRhID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgIHZhciByZXMgPSBbXTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciBnZW9Db29yZCA9IGdlb0Nvb3JkTWFwW2RhdGFbaV0ubmFtZV07CiAgICAgICAgICBpZiAoZ2VvQ29vcmQpIHsKICAgICAgICAgICAgcmVzLnB1c2goewogICAgICAgICAgICAgIG5hbWU6IGRhdGFbaV0ubmFtZSwKICAgICAgICAgICAgICB2YWx1ZTogZ2VvQ29vcmQuY29uY2F0KGRhdGFbaV0udmFsdWUpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgICB9OwogICAgICB2YXIgY29udmVydFRvTGluZURhdGEgPSBmdW5jdGlvbihkYXRhLCBncHMpIHsKICAgICAgICB2YXIgcmVzID0gW107CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB2YXIgZGF0YUl0ZW0gPSBkYXRhW2ldOwogICAgICAgICAgdmFyIGZyb21Db29yZCA9IGdlb0Nvb3JkTWFwW2RhdGFJdGVtLm5hbWVdOwogICAgICAgICAgdmFyIHRvQ29vcmQgPSBncHM7IC8v6YOR5beeCiAgICAgICAgICAvLyAgdmFyIHRvQ29vcmQgPSBnZW9HcHNbTWF0aC5yYW5kb20oKSozXTsKICAgICAgICAgIGlmIChmcm9tQ29vcmQgJiYgdG9Db29yZCkgewogICAgICAgICAgICByZXMucHVzaChbewogICAgICAgICAgICAgIGNvb3JkOiBmcm9tQ29vcmQsCiAgICAgICAgICAgICAgdmFsdWU6IGRhdGFJdGVtLnZhbHVlCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBjb29yZDogdG9Db29yZCwKICAgICAgICAgICAgfV0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgICB9OwogICAgICB2YXIgb3B0aW9uWHlNYXAwMSA9IHsKICAgICAgICB0aW1lbGluZTogewogICAgICAgICAgZGF0YTogeWVhciwKICAgICAgICAgIGF4aXNUeXBlOiAnY2F0ZWdvcnknLAogICAgICAgICAgYXV0b1BsYXk6IHRydWUsCiAgICAgICAgICBwbGF5SW50ZXJ2YWw6IDMwMDAsCiAgICAgICAgICBsZWZ0OiAnMTAlJywKICAgICAgICAgIHJpZ2h0OiAnMTAlJywKICAgICAgICAgIGJvdHRvbTogJzIlJywKICAgICAgICAgIHdpZHRoOiAnODAlJywKICAgICAgICAgIC8vICBoZWlnaHQ6IG51bGwsCiAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgICAgIGNvbG9yOiAnI2RkZCcKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgc3ltYm9sU2l6ZTogMTAsCiAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6ICcjNTU1JwogICAgICAgICAgfSwKICAgICAgICAgIGNoZWNrcG9pbnRTdHlsZTogewogICAgICAgICAgICBib3JkZXJDb2xvcjogJyM3NzcnLAogICAgICAgICAgICBib3JkZXJXaWR0aDogMgogICAgICAgICAgfSwKICAgICAgICAgIGNvbnRyb2xTdHlsZTogewogICAgICAgICAgICBzaG93TmV4dEJ0bjogdHJ1ZSwKICAgICAgICAgICAgc2hvd1ByZXZCdG46IHRydWUsCiAgICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAgIGNvbG9yOiAnIzY2NicsCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjNjY2JwogICAgICAgICAgICB9LAogICAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICAgIGNvbG9yOiAnI2FhYScsCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjYWFhJwogICAgICAgICAgICB9CiAgICAgICAgICB9LAoKICAgICAgICB9LAogICAgICAgIGJhc2VPcHRpb246IHsKICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSwKICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAxMDAwLAogICAgICAgICAgYW5pbWF0aW9uRWFzaW5nOiAnY3ViaWNJbk91dCcsCiAgICAgICAgICBhbmltYXRpb25EdXJhdGlvblVwZGF0ZTogMTAwMCwKICAgICAgICAgIGFuaW1hdGlvbkVhc2luZ1VwZGF0ZTogJ2N1YmljSW5PdXQnLAogICAgICAgICAgZ3JpZDogewogICAgICAgICAgICByaWdodDogJzEwJScsCiAgICAgICAgICAgIHRvcDogJzE4JScsCiAgICAgICAgICAgIGJvdHRvbTogJzEwJScsCiAgICAgICAgICAgIHdpZHRoOiAnMjUlJwogICAgICAgICAgfSwKICAgICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgICAgdHJpZ2dlcjogJ2F4aXMnLCAvLyBob3ZlcuinpuWPkeWZqAogICAgICAgICAgICBheGlzUG9pbnRlcjogeyAvLyDlnZDmoIfovbTmjIfnpLrlmajvvIzlnZDmoIfovbTop6blj5HmnInmlYgKICAgICAgICAgICAgICB0eXBlOiAnc2hhZG93JywgLy8g6buY6K6k5Li655u057q/77yM5Y+v6YCJ5Li677yaJ2xpbmUnIHwgJ3NoYWRvdycKICAgICAgICAgICAgICBzaGFkb3dTdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDE1MCwxNTAsMTUwLDAuMSknIC8vaG92ZXLpopzoibIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBnZW86IHsKICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgbWFwOiAn6ZmV6KW/JywKICAgICAgICAgICAgcm9hbTogdHJ1ZSwKICAgICAgICAgICAgem9vbTogMSwKICAgICAgICAgICAgY2VudGVyOiBbMTEwLjk0ODAsIDM1LjI2MzFdLAogICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMTQ3LCAyMzUsIDI0OCwgMSknLAogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgICAgICBhcmVhQ29sb3I6IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlhbCcsCiAgICAgICAgICAgICAgICAgIHg6IDAuNSwKICAgICAgICAgICAgICAgICAgeTogMC41LAogICAgICAgICAgICAgICAgICByOiAwLjgsCiAgICAgICAgICAgICAgICAgIGNvbG9yU3RvcHM6IFt7CiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgxNDcsIDIzNSwgMjQ4LCAwKScgLy8gMCUg5aSE55qE6aKc6ImyCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDE0NywgMjM1LCAyNDgsIC4yKScgLy8gMTAwJSDlpITnmoTpopzoibIKICAgICAgICAgICAgICAgICAgfV0sCiAgICAgICAgICAgICAgICAgIGdsb2JhbENvb3JkOiBmYWxzZSAvLyDnvLrnnIHkuLogZmFsc2UKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMTI4LCAyMTcsIDI0OCwgMSknLAogICAgICAgICAgICAgICAgLy8gc2hhZG93Q29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJywKICAgICAgICAgICAgICAgIHNoYWRvd09mZnNldFg6IC0yLAogICAgICAgICAgICAgICAgc2hhZG93T2Zmc2V0WTogMiwKICAgICAgICAgICAgICAgIHNoYWRvd0JsdXI6IDEwCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICAgICAgYXJlYUNvbG9yOiAnIzM4OUJCNycsCiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIG9wdGlvbnM6IFtdCgogICAgICB9OwogICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHllYXIubGVuZ3RoOyBuKyspIHsKICAgICAgICBvcHRpb25YeU1hcDAxLm9wdGlvbnMucHVzaCh7CiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMDUxYjRhJywKICAgICAgICAgIHRpdGxlOiBbewogICAgICAgICAgICAvKiB0ZXh0OiAn5Zyw5Zu+JywKICAgICAgICAgICAgIHN1YnRleHQ6ICflhoXpg6jmlbDmja7or7fli7/lpJbkvKAnLAogICAgICAgICAgICAgbGVmdDogJ2NlbnRlcicsCiAgICAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnCiAgICAgICAgICAgICB9Ki8KICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBpZDogJ3N0YXRpc3RpYycsCiAgICAgICAgICAgICAgdGV4dDogeWVhcltuXSArICLlubTmlbDmja7nu5/orqHmg4XlhrUiLAogICAgICAgICAgICAgIGxlZnQ6ICc2MCUnLAogICAgICAgICAgICAgIHRvcDogJzglJywKICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgICAgIGNvbG9yOiAnI2ZmZicsCiAgICAgICAgICAgICAgICBmb250U2l6ZTogMjQKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICB4QXhpczogewogICAgICAgICAgICB0eXBlOiAndmFsdWUnLAogICAgICAgICAgICBzY2FsZTogdHJ1ZSwKICAgICAgICAgICAgcG9zaXRpb246ICd0b3AnLAogICAgICAgICAgICBtaW46IDAsCiAgICAgICAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSwKICAgICAgICAgICAgc3BsaXRMaW5lOiB7CiAgICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBheGlzVGljazogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICAgIG1hcmdpbjogMiwKICAgICAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgICAgIGNvbG9yOiAnI2FhYScKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgeUF4aXM6IHsKICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgICAgLy8gIG5hbWU6ICdUT1AgMjAnLAogICAgICAgICAgICBuYW1lR2FwOiAxNiwKICAgICAgICAgICAgYXhpc0xpbmU6IHsKICAgICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICcjZGRkJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXhpc1RpY2s6IHsKICAgICAgICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICAgIGNvbG9yOiAnI2RkZCcKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICAgIGludGVydmFsOiAwLAogICAgICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICcjZGRkJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGF0YTogY2F0ZWdvcnlEYXRhCiAgICAgICAgICB9LAogICAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICAgIC8v5pyq55+l5L2c55SoCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAvL+aWh+Wtl+WSjOagh+W/lwogICAgICAgICAgICAgIG5hbWU6ICdsaWdodCcsCiAgICAgICAgICAgICAgdHlwZTogJ3NjYXR0ZXInLAogICAgICAgICAgICAgIGNvb3JkaW5hdGVTeXN0ZW06ICdnZW8nLAogICAgICAgICAgICAgIGRhdGE6IGNvbnZlcnREYXRhKG1hcERhdGFbbl0pLAogICAgICAgICAgICAgIHN5bWJvbDogJ3BpbicsIC8v5rCU5rOhCiAgICAgICAgICAgICAgc3ltYm9sU2l6ZTogZnVuY3Rpb24odmFsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gNDA7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogJ3tAWzJdfScsCiAgICAgICAgICAgICAgICAgIC8vIHBvc2l0aW9uOiAncmlnaHQnLAogICAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnLAogICAgICAgICAgICAgICAgICBmb250U2l6ZTogOSwKICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI0Y2MjE1NycKICAgICAgICAgICAgICAgICAgLy8gY29sb3I6IGNvbG9yc1tjb2xvckluZGV4XVtuXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgLy/lnLDlm77vvJ8KICAgICAgICAgICAgewogICAgICAgICAgICAgIHR5cGU6ICdtYXAnLAogICAgICAgICAgICAgIG1hcDogJ+mZleilvycsCiAgICAgICAgICAgICAgZ2VvSW5kZXg6IDAsCiAgICAgICAgICAgICAgYXNwZWN0U2NhbGU6IDAuNzUsIC8v6ZW/5a695q+UCiAgICAgICAgICAgICAgc2hvd0xlZ2VuZFN5bWJvbDogZmFsc2UsIC8vIOWtmOWcqGxlZ2VuZOaXtuaYvuekugogICAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICByb2FtOiB0cnVlLAogICAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgICAgIGFyZWFDb2xvcjogJyMwMzE1MjUnLAogICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyNGRkZGRkYnLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgICAgICAgIGFyZWFDb2xvcjogJyMyQjkxQjcnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhbmltYXRpb246IGZhbHNlLAogICAgICAgICAgICAgIGRhdGE6IG1hcERhdGEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLy/lnLDlm77ngrnnmoTliqjnlLvmlYjmnpwKICAgICAgICAgICAgewogICAgICAgICAgICAgIC8vICBuYW1lOiAnVG9wIDUnLAogICAgICAgICAgICAgIHR5cGU6ICdlZmZlY3RTY2F0dGVyJywKICAgICAgICAgICAgICBjb29yZGluYXRlU3lzdGVtOiAnZ2VvJywKICAgICAgICAgICAgICBkYXRhOiBjb252ZXJ0RGF0YShtYXBEYXRhW25dLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICAgICAgcmV0dXJuIGIudmFsdWUgLSBhLnZhbHVlOwogICAgICAgICAgICAgIH0pLnNsaWNlKDAsIDIwKSksCiAgICAgICAgICAgICAgc3ltYm9sU2l6ZTogZnVuY3Rpb24odmFsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMTA7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzaG93RWZmZWN0T246ICdyZW5kZXInLAogICAgICAgICAgICAgIHJpcHBsZUVmZmVjdDogewogICAgICAgICAgICAgICAgYnJ1c2hUeXBlOiAnc3Ryb2tlJwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgaG92ZXJBbmltYXRpb246IHRydWUsCiAgICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6ICd7Yn0nLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JpZ2h0JywKICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yc1tjb2xvckluZGV4XVtuXSwKICAgICAgICAgICAgICAgICAgc2hhZG93Qmx1cjogMTAsCiAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBjb2xvcnNbY29sb3JJbmRleF1bbl0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHpsZXZlbDogMQogICAgICAgICAgICB9LAogICAgICAgICAgICAvLyB7CiAgICAgICAgICAgIC8vICAgICBuYW1lOiAn5pWw5o2u54K5JywKICAgICAgICAgICAgLy8gICAgIHR5cGU6ICdzY2F0dGVyJywKICAgICAgICAgICAgLy8gICAgIGNvb3JkaW5hdGVTeXN0ZW06ICdnZW8nLAogICAgICAgICAgICAvLyAgICAgc3ltYm9sOiAncGluJywgLy/msJTms6EKICAgICAgICAgICAgLy8gICAgIHN5bWJvbFNpemU6IGZ1bmN0aW9uKHZhbCkgewogICAgICAgICAgICAvLyAgICAgICAgIHJldHVybiAzMjsKICAgICAgICAgICAgLy8gICAgIH0sCiAgICAgICAgICAgIC8vICAgICBsYWJlbDogewogICAgICAgICAgICAvLyAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAvLyAgICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICAvLyAgICAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogJ3tAdmFsdWV9JywKICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIGNvbG9yOiAnI2ZmZicsCiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBmb250U2l6ZTogOSwKICAgICAgICAgICAgLy8gICAgICAgICAgICAgfQogICAgICAgICAgICAvLyAgICAgICAgIH0KICAgICAgICAgICAgLy8gICAgIH0sCiAgICAgICAgICAgIC8vICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgLy8gICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29sb3I6ICcjRjYyMTU3JywgLy/moIflv5fpopzoibIKICAgICAgICAgICAgLy8gICAgICAgICB9CiAgICAgICAgICAgIC8vICAgICB9LAogICAgICAgICAgICAvLyAgICAgemxldmVsOiA2LAogICAgICAgICAgICAvLyAgICAgZGF0YTogY29udmVydERhdGEobWFwRGF0YVtuXSksCiAgICAgICAgICAgIC8vIH0sCiAgICAgICAgICAgIC8v5p+x54q25Zu+CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICB6bGV2ZWw6IDEuNSwKICAgICAgICAgICAgICB0eXBlOiAnYmFyJywKICAgICAgICAgICAgICBzeW1ib2w6ICdub25lJywKICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICAgIG5vcm1hbDogewogICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW2NvbG9ySW5kZXhdW25dCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkYXRhOiBiYXJEYXRhW25dCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KQogICAgICB9CgogICAgICB0aGlzLmNoYXJ0LnNldE9wdGlvbihvcHRpb25YeU1hcDAxKQoKICAgIH0sCiAgICByYW5kb21OdW0obWluTnVtLCBtYXhOdW0pIHsKICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgcmV0dXJuIHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiBtaW5OdW0gKyAxLCAxMCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIChtYXhOdW0gLSBtaW5OdW0gKyAxKSArIG1pbk51bSwgMTApOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9Cn0K"},null]}