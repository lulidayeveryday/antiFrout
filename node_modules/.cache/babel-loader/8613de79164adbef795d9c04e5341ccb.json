{"remainingRequest":"E:\\2020xian\\git-AntiFraud\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js!E:\\2020xian\\git-AntiFraud\\node_modules\\_babel-loader@8.2.2@babel-loader\\lib\\index.js!E:\\2020xian\\git-AntiFraud\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js??ref--0-0!E:\\2020xian\\git-AntiFraud\\node_modules\\_vue-loader@15.9.6@vue-loader\\lib\\index.js??vue-loader-options!E:\\2020xian\\git-AntiFraud\\src\\views\\fraud-management\\report-involved.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\2020xian\\git-AntiFraud\\src\\views\\fraud-management\\report-involved.vue","mtime":1615367742812},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_babel-loader@8.2.2@babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_vue-loader@15.9.6@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}