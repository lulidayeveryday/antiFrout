{"remainingRequest":"E:\\2020xian\\git-AntiFraud\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js!E:\\2020xian\\git-AntiFraud\\node_modules\\_babel-loader@8.2.2@babel-loader\\lib\\index.js!E:\\2020xian\\git-AntiFraud\\src\\router\\index.js","dependencies":[{"path":"E:\\2020xian\\git-AntiFraud\\src\\router\\index.js","mtime":1610095286824},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\2020xian\\git-AntiFraud\\node_modules\\_babel-loader@8.2.2@babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCBmcm9tICJFOi8yMDIweGlhbi9naXQtQW50aUZyYXVkL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xMi41QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CmltcG9ydCBSb3V0ZXIgZnJvbSAndnVlLXJvdXRlcic7ClZ1ZS51c2UoUm91dGVyKTsKLyogTGF5b3V0ICovCgppbXBvcnQgTGF5b3V0IGZyb20gJ0AvbGF5b3V0JzsKLyogUm91dGVyIE1vZHVsZXMgKi8KCmltcG9ydCBjb21wb25lbnRzUm91dGVyIGZyb20gJy4vbW9kdWxlcy9jb21wb25lbnRzJzsKaW1wb3J0IGNoYXJ0c1JvdXRlciBmcm9tICcuL21vZHVsZXMvY2hhcnRzJzsKaW1wb3J0IHRhYmxlUm91dGVyIGZyb20gJy4vbW9kdWxlcy90YWJsZSc7CmltcG9ydCBuZXN0ZWRSb3V0ZXIgZnJvbSAnLi9tb2R1bGVzL25lc3RlZCc7Ci8qKgogKiBOb3RlOiBzdWItbWVudSBvbmx5IGFwcGVhciB3aGVuIHJvdXRlIGNoaWxkcmVuLmxlbmd0aCA+PSAxCiAqIERldGFpbCBzZWU6IGh0dHBzOi8vcGFuamlhY2hlbi5naXRodWIuaW8vdnVlLWVsZW1lbnQtYWRtaW4tc2l0ZS9ndWlkZS9lc3NlbnRpYWxzL3JvdXRlci1hbmQtbmF2Lmh0bWwKICoKICogaGlkZGVuOiB0cnVlICAgICAgICAgICAgICAgICAgIGlmIHNldCB0cnVlLCBpdGVtIHdpbGwgbm90IHNob3cgaW4gdGhlIHNpZGViYXIoZGVmYXVsdCBpcyBmYWxzZSkKICogYWx3YXlzU2hvdzogdHJ1ZSAgICAgICAgICAgICAgIGlmIHNldCB0cnVlLCB3aWxsIGFsd2F5cyBzaG93IHRoZSByb290IG1lbnUKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzZXQgYWx3YXlzU2hvdywgd2hlbiBpdGVtIGhhcyBtb3JlIHRoYW4gb25lIGNoaWxkcmVuIHJvdXRlLAogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQgd2lsbCBiZWNvbWVzIG5lc3RlZCBtb2RlLCBvdGhlcndpc2Ugbm90IHNob3cgdGhlIHJvb3QgbWVudQogKiByZWRpcmVjdDogbm9SZWRpcmVjdCAgICAgICAgICAgaWYgc2V0IG5vUmVkaXJlY3Qgd2lsbCBubyByZWRpcmVjdCBpbiB0aGUgYnJlYWRjcnVtYgogKiBuYW1lOidyb3V0ZXItbmFtZScgICAgICAgICAgICAgdGhlIG5hbWUgaXMgdXNlZCBieSA8a2VlcC1hbGl2ZT4gKG11c3Qgc2V0ISEhKQogKiBtZXRhIDogewogICAgcm9sZXM6IFsnYWRtaW4nLCdlZGl0b3InXSAgICBjb250cm9sIHRoZSBwYWdlIHJvbGVzICh5b3UgY2FuIHNldCBtdWx0aXBsZSByb2xlcykKICAgIHRpdGxlOiAndGl0bGUnICAgICAgICAgICAgICAgdGhlIG5hbWUgc2hvdyBpbiBzaWRlYmFyIGFuZCBicmVhZGNydW1iIChyZWNvbW1lbmQgc2V0KQogICAgaWNvbjogJ3N2Zy1uYW1lJy8nZWwtaWNvbi14JyB0aGUgaWNvbiBzaG93IGluIHRoZSBzaWRlYmFyCiAgICBub0NhY2hlOiB0cnVlICAgICAgICAgICAgICAgIGlmIHNldCB0cnVlLCB0aGUgcGFnZSB3aWxsIG5vIGJlIGNhY2hlZChkZWZhdWx0IGlzIGZhbHNlKQogICAgYWZmaXg6IHRydWUgICAgICAgICAgICAgICAgICBpZiBzZXQgdHJ1ZSwgdGhlIHRhZyB3aWxsIGFmZml4IGluIHRoZSB0YWdzLXZpZXcKICAgIGJyZWFkY3J1bWI6IGZhbHNlICAgICAgICAgICAgaWYgc2V0IGZhbHNlLCB0aGUgaXRlbSB3aWxsIGhpZGRlbiBpbiBicmVhZGNydW1iKGRlZmF1bHQgaXMgdHJ1ZSkKICAgIGFjdGl2ZU1lbnU6ICcvZXhhbXBsZS9saXN0JyAgaWYgc2V0IHBhdGgsIHRoZSBzaWRlYmFyIHdpbGwgaGlnaGxpZ2h0IHRoZSBwYXRoIHlvdSBzZXQKICB9CiAqLwoKLyoqCiAqIGNvbnN0YW50Um91dGVzCiAqIGEgYmFzZSBwYWdlIHRoYXQgZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHJlcXVpcmVtZW50cwogKiBhbGwgcm9sZXMgY2FuIGJlIGFjY2Vzc2VkCiAqLwoKZXhwb3J0IHZhciBjb25zdGFudFJvdXRlcyA9IFt7CiAgcGF0aDogJy9yZWRpcmVjdCcsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgaGlkZGVuOiB0cnVlLAogIGNoaWxkcmVuOiBbewogICAgcGF0aDogJy9yZWRpcmVjdC86cGF0aCguKiknLAogICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9yZWRpcmVjdC9pbmRleCcpKTsKICAgICAgfSk7CiAgICB9CiAgfV0KfSwgewogIHBhdGg6ICcvbG9naW4nLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9sb2dpbi9pbmRleCcpKTsKICAgIH0pOwogIH0sCiAgaGlkZGVuOiB0cnVlCn0sIHsKICBwYXRoOiAnL2F1dGgtcmVkaXJlY3QnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9sb2dpbi9hdXRoLXJlZGlyZWN0JykpOwogICAgfSk7CiAgfSwKICBoaWRkZW46IHRydWUKfSwgewogIHBhdGg6ICcvNDA0JywKICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHsKICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJ0Avdmlld3MvZXJyb3ItcGFnZS80MDQnKSk7CiAgICB9KTsKICB9LAogIGhpZGRlbjogdHJ1ZQp9LCB7CiAgcGF0aDogJy80MDEnLAogIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnQC92aWV3cy9lcnJvci1wYWdlLzQwMScpKTsKICAgIH0pOwogIH0sCiAgaGlkZGVuOiB0cnVlCn0KLyp7CiAgcGF0aDogJy9mcmF1ZC1tYW5hZ2VtZW50cycsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvZnJhdWQtbWFuYWdlbWVudC9oYXdrZXllLWRhaWx5JywKICBhbHdheXNTaG93OiB0cnVlLCAvLyB3aWxsIGFsd2F5cyBzaG93IHRoZSByb290IG1lbnUKICBuYW1lOiAn5qy66K+I566h55CGcycsCiAgbWV0YTogewogICAgdGl0bGU6ICfmrLror4jnrqHnkIZzJywKICAgIGljb246ICdsb2NrJyAvLyB5b3UgY2FuIHNldCByb2xlcyBpbiByb290IG5hdgogIH0sCiAgY2hpbGRyZW46IFsKICAgIHsKICAgICAgcGF0aDogJ3JlcG9ydC1pbnZvbHZlZCcsCiAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2ZyYXVkLW1hbmFnZW1lbnQvcmVwb3J0LWludm9sdmVkJyksCiAgICAgIG5hbWU6ICfmtonmoYjlj7fnoIHkuL7miqUnLAogICAgICBtZXRhOiB7IHRpdGxlOiAn5raJ5qGI5Y+356CB5Li+5oqlJywgaWNvbjogJ2NsaXBib2FyZCd9CiAgICB9LAogICAgewogICAgICBwYXRoOiAnaGF3ay1leWUtZGV0ZWN0aW9uJywKICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvZnJhdWQtbWFuYWdlbWVudC9oYXdrLWV5ZS1kZXRlY3Rpb24nKSwKICAgICAgbmFtZTogJ+m5sOecvOajgOWHuuiviOmql+WPt+eggScsCiAgICAgIG1ldGE6IHsgdGl0bGU6ICfpubDnnLzmo4Dlh7ror4jpqpflj7fnoIEnLCBpY29uOiAnbGluaycgfQogICAgfSwKICAgIHsKICAgICAgcGF0aDogJ2hpZ2gtcmlzay1yb2FtaW5nJywKICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvZnJhdWQtbWFuYWdlbWVudC9oaWdoLXJpc2stcm9hbWluZycpLAogICAgICBuYW1lOiAn6auY5Y2x5ryr5ri46K+d5Yqh5byC5bi4562b6YCJJywKICAgICAgbWV0YTogeyB0aXRsZTogJ+mrmOWNsea8q+a4uOivneWKoeW8guW4uCcsIGljb246ICdleGFtcGxlJyB9CiAgICB9LAogICAgewogICAgICBwYXRoOiAnc2FsZXMtaW5jcmVhc2UnLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9mcmF1ZC1tYW5hZ2VtZW50L3NhbGVzLWluY3JlYXNlJyksCiAgICAgIG5hbWU6ICfplIDph4/nqoHlop7pooToraYnLAogICAgICBtZXRhOiB7IHRpdGxlOiAn6ZSA6YeP56qB5aKeJywgaWNvbjogJ2Zvcm0nIH0KICAgIH0sCiAgXQp9LCovCgovKnsKICBwYXRoOiAnLycsCiAgY29tcG9uZW50OiBMYXlvdXQsCiAgcmVkaXJlY3Q6ICcvaW5kZXgnLAogIGNoaWxkcmVuOiBbCiAgICB7CiAgICAgIHBhdGg6ICdpbmRleCcsCiAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2Rhc2hib2FyZC9pbmRleCcpLAogICAgICBuYW1lOiAn6aaW6aG1JywKICAgICAgbWV0YTogeyB0aXRsZTogJ+mmlumhtScsIGljb246ICdkYXNoYm9hcmQnLCBhZmZpeDogdHJ1ZSB9CiAgICB9CiAgXQp9LAp7CiAgcGF0aDogJy9mcmF1ZC1tYW5hZ2VtZW50JywKICBjb21wb25lbnQ6IExheW91dCwKICByZWRpcmVjdDogJy9mcmF1ZC1tYW5hZ2VtZW50L2hhd2tleWUtZGFpbHknLAogIGFsd2F5c1Nob3c6IHRydWUsIC8vIHdpbGwgYWx3YXlzIHNob3cgdGhlIHJvb3QgbWVudQogIG5hbWU6ICfmrLror4jnrqHnkIYnLAogIG1ldGE6IHsKICAgIHRpdGxlOiAn5qy66K+I566h55CGJywKICAgIGljb246ICdsb2NrJyAvLyB5b3UgY2FuIHNldCByb2xlcyBpbiByb290IG5hdgogIH0sCiAgY2hpbGRyZW46IFsKICAgIHsKICAgICAgcGF0aDogJ2hhd2tleWUtZGFpbHknLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9mcmF1ZC1tYW5hZ2VtZW50L2hhd2tleWUtZGFpbHknKSwKICAgICAgbmFtZTogJ+m5sOecvOWBnOacuueOh+aXpeaKpScsCiAgICAgIG1ldGE6IHsgdGl0bGU6ICfpubDnnLzlgZzmnLrnjofml6XmiqUnLCBpY29uOiAnZG9jdW1lbnRhdGlvbid9CiAgICB9LAogICAgewogICAgICBwYXRoOiAnZnJhdWQtZGV0YWlscycsCiAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2ZyYXVkLW1hbmFnZW1lbnQvZnJhdWQtZGV0YWlscycpLAogICAgICBuYW1lOiAn5qy66K+I5piO57uGJywKICAgICAgbWV0YTogeyB0aXRsZTogJ+asuuiviOaYjue7hicsIGljb246ICdleGNlbCcgfQogICAgfSwKICAgIHsKICAgICAgcGF0aDogJ2Rvd250aW1lLXdoaXRlLWxpc3QnLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9mcmF1ZC1tYW5hZ2VtZW50L2Rvd250aW1lLXdoaXRlLWxpc3QnKSwKICAgICAgbmFtZTogJ+WBnOacuueZveWQjeWNleeuoeeQhicsCiAgICAgIG1ldGE6IHsgdGl0bGU6ICflgZzmnLrnmb3lkI3ljZXnrqHnkIYnLCBpY29uOiAndGFiJyB9CiAgICB9LAogICAgewogICAgICBwYXRoOiAnYmF0Y2gtc2h1dGRvd24nLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9mcmF1ZC1tYW5hZ2VtZW50L2JhdGNoLXNodXRkb3duJyksCiAgICAgIG5hbWU6ICfmibnph4/lgZzmnLonLAogICAgICBtZXRhOiB7IHRpdGxlOiAn5om56YeP5YGc5py6JywgaWNvbjogJ3NraWxsJyB9CiAgICB9LAogIF0KfSwKewogIHBhdGg6ICcvbGltaXRzQXV0aG9yaXR5JywKICBjb21wb25lbnQ6IExheW91dCwKICByZWRpcmVjdDogJy9saW1pdHNBdXRob3JpdHkvb3JnYW5pemF0aW9uJywKICBhbHdheXNTaG93OiB0cnVlLCAvLyB3aWxsIGFsd2F5cyBzaG93IHRoZSByb290IG1lbnUKICBuYW1lOiAn5p2D6ZmQ566h55CGJywKICBtZXRhOiB7CiAgICB0aXRsZTogJ+adg+mZkOeuoeeQhicsCiAgICBpY29uOiAnbGlzdCcsCiAgICAvLyByb2xlczogWydhZG1pbicsICdlZGl0b3InXSAvLyB5b3UgY2FuIHNldCByb2xlcyBpbiByb290IG5hdgogIH0sCiAgY2hpbGRyZW46IFsKICAgIHsKICAgICAgcGF0aDogJ29yZ2FuaXphdGlvbicsCiAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2xpbWl0cy1hdXRob3JpdHkvb3JnYW5pemF0aW9uJyksCiAgICAgIG5hbWU6ICfnu4Tnu4fmnLrmnoTnrqHnkIYnLAogICAgICBtZXRhOiB7IHRpdGxlOiAn57uE57uH5py65p6E566h55CGJywgaWNvbjogJ3RyZWUtdGFibGUnIH0KICAgIH0sCiAgICB7CiAgICAgIHBhdGg6ICdjaGFubmVsLW1hbmFnZW1lbnQnLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9saW1pdHMtYXV0aG9yaXR5L2NoYW5uZWwtbWFuYWdlbWVudCcpLAogICAgICBuYW1lOiAn5rig6YGT566h55CGJywKICAgICAgbWV0YTogeyB0aXRsZTogJ+a4oOmBk+euoeeQhicsIGljb246ICdjaGFydCcgfQogICAgfSwKICAgIHsKICAgICAgcGF0aDogJ3VzZXInLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9saW1pdHMtYXV0aG9yaXR5L3VzZXInKSwKICAgICAgbmFtZTogJ+eUqOaIt+euoeeQhicsCiAgICAgIG1ldGE6IHsgdGl0bGU6ICfnlKjmiLfnrqHnkIYnLCBpY29uOiAncGVvcGxlcycgfQogICAgfSwKICAgIHsKICAgICAgcGF0aDogJ3JvbGUtbWFuYWdlbWVudCcsCiAgICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KCdAL3ZpZXdzL2xpbWl0cy1hdXRob3JpdHkvcm9sZS1tYW5hZ2VtZW50JyksCiAgICAgIG5hbWU6ICfop5LoibLnrqHnkIYnLAogICAgICBtZXRhOiB7IHRpdGxlOiAn6KeS6Imy566h55CGJywgaWNvbjogJ2NvbXBvbmVudCcgfQogICAgfSwKICBdCn0sKi8KCi8qewogICAgcGF0aDogJy9kb2N1bWVudGF0aW9uJywKICAgIGNvbXBvbmVudDogTGF5b3V0LAogICAgY2hpbGRyZW46IFsKICAgICAgewogICAgICAgIHBhdGg6ICdpbmRleCcsCiAgICAgICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvZG9jdW1lbnRhdGlvbi9pbmRleCcpLAogICAgICAgIG5hbWU6ICdEb2N1bWVudGF0aW9uJywKICAgICAgICBtZXRhOiB7IHRpdGxlOiAnRG9jdW1lbnRhdGlvbicsIGljb246ICdkb2N1bWVudGF0aW9uJ30KICAgICAgfQogICAgXQogIH0sKi8KCi8qewogIHBhdGg6ICcvZ3VpZGUnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIHJlZGlyZWN0OiAnL2d1aWRlL2luZGV4JywKICBjaGlsZHJlbjogWwogICAgewogICAgICBwYXRoOiAnaW5kZXgnLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9ndWlkZS9pbmRleCcpLAogICAgICBuYW1lOiAnR3VpZGUnLAogICAgICBtZXRhOiB7IHRpdGxlOiAnR3VpZGUnLCBpY29uOiAnZ3VpZGUnLCBub0NhY2hlOiB0cnVlIH0KICAgIH0KICBdCn0sCnsKICBwYXRoOiAnL3Byb2ZpbGUnLAogIGNvbXBvbmVudDogTGF5b3V0LAogIHJlZGlyZWN0OiAnL3Byb2ZpbGUvaW5kZXgnLAogIGhpZGRlbjogdHJ1ZSwKICBjaGlsZHJlbjogWwogICAgewogICAgICBwYXRoOiAnaW5kZXgnLAogICAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9wcm9maWxlL2luZGV4JyksCiAgICAgIG5hbWU6ICdQcm9maWxlJywKICAgICAgbWV0YTogeyB0aXRsZTogJ1Byb2ZpbGUnLCBpY29uOiAndXNlcicsIG5vQ2FjaGU6IHRydWUgfQogICAgfQogIF0KfSovCl07Ci8qKgogKiBhc3luY1JvdXRlcwogKiB0aGUgcm91dGVzIHRoYXQgbmVlZCB0byBiZSBkeW5hbWljYWxseSBsb2FkZWQgYmFzZWQgb24gdXNlciByb2xlcwogKi8KCnZhciBjcmVhdGVSb3V0ZXIgPSBmdW5jdGlvbiBjcmVhdGVSb3V0ZXIoKSB7CiAgcmV0dXJuIG5ldyBSb3V0ZXIoewogICAgLy8gbW9kZTogJ2hpc3RvcnknLCAvLyByZXF1aXJlIHNlcnZpY2Ugc3VwcG9ydAogICAgc2Nyb2xsQmVoYXZpb3I6IGZ1bmN0aW9uIHNjcm9sbEJlaGF2aW9yKCkgewogICAgICByZXR1cm4gewogICAgICAgIHk6IDAKICAgICAgfTsKICAgIH0sCiAgICByb3V0ZXM6IGNvbnN0YW50Um91dGVzCiAgfSk7Cn07Cgp2YXIgcm91dGVyID0gY3JlYXRlUm91dGVyKCk7IC8vIERldGFpbCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8xMjM0I2lzc3VlY29tbWVudC0zNTc5NDE0NjUKCmV4cG9ydCBmdW5jdGlvbiByZXNldFJvdXRlcigpIHsKICB2YXIgbmV3Um91dGVyID0gY3JlYXRlUm91dGVyKCk7CiAgcm91dGVyLm1hdGNoZXIgPSBuZXdSb3V0ZXIubWF0Y2hlcjsgLy8gcmVzZXQgcm91dGVyCn0KZXhwb3J0IGRlZmF1bHQgcm91dGVyOw=="},null]}